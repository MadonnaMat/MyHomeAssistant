'1655381206162':
  sequence:
  - service: scene.turn_on
    target:
      entity_id: scene.welcome_home
    metadata: {}
  - type: turn_on
    device_id: 88cc3a491d72955d7a52219c0329d35c
    entity_id: light.kitchen_lights
    domain: light
    brightness_pct: 100
  - type: turn_on
    device_id: ed97c29bebf0b2b618b8e8ed85a42563
    entity_id: light.living_room_lamp
    domain: light
  mode: single
  alias: Welcome Me Home
have_alexa_say:
  alias: Have Alexa Say
  variables:
    thing_to_say: default
  sequence:
  - service: input_text.set_value
    data_template:
      value: '{{ thing_to_say }}'
    target:
      entity_id: input_text.say_everywhere_text
  - service: input_button.press
    data: {}
    target:
      entity_id: input_button.say_everywhere_trigger
  mode: single
area_scene_snapshot:
  alias: area_scene_snapshot
  fields:
    area:
      description: Area
      example: Living room
    group:
      description: Group of lights to add to dialog
      example: light.living_room
    description:
      description: description to save with
      example: at evening when curtains close
  variables:
    entities: "{%- set scene_entities = [] -%}\n{%- if group is not defined or group\
      \ is none -%}\n  {{ area_entities(area) | select('match','^light\\.') | list\
      \ }}\n{%- else -%}\n  {{ state_attr(group, 'entity_id') | list }}\n{%- endif\
      \ -%}\n"
    mytime: '{{ states(''sensor.date_time_iso'') | regex_replace(find=''[^\\dT]'',
      replace='''') | replace(''T'',''_'') }}'
    desc: '{{  iif(description is not defined or description is none,states(''input_text.scene_snapshot_desc''),description)
      }}'
    snap: snap_{{ (iif(group is not defined or group is none, area, group) ) | regex_replace(find='[^\\w]',
      replace='_') | lower }}_{{ mytime }}_{{ desc | regex_replace(find='[^\\w]',
      replace='_') | lower }}
  sequence:
  - choose:
    - conditions: '{{ entities | length == 0 }}'
      sequence:
      - service: script.debug
        data_template:
          source: script.area_scene_snapshot
          title: Invalid group or area
          message: 'Group {{ group }} or area {{ area }} has no entities

            '
    default:
    - service: notify.scene_notify_snapshot
      data_template:
        message: "- id: {{ snap }}\n  name: {{ snap }}\n  # description: {{ desc }}\
          \ \n  # saved: {{ states('sensor.time_date') }} ({{ states('sensor.time_of_day')\
          \ }})\n  # illuminance:\n  {% for item in states.sensor | selectattr('attributes.device_class',\
          \ 'eq', 'illuminance') | list -%}\n  #   {{ item.entity_id }}: {{ states(item.entity_id)\
          \ }}\n  {% endfor -%}\n  # covers:\n  {% for item in states.cover -%}\n\
          \  #   {{ item.entity_id }}: {{ state_attr(item.entity_id,'current_position')\
          \ }}  # {{ states(item.entity_id) }} \n  {% endfor -%}\n  # condition: \n\
          \  #   sun: \"{{ states('sun.sun') }}\"\n  #   elevation: {{ state_attr('sun.sun',\
          \ 'elevation') }} degrees\n  #   rain: {{ states('sensor.my_rainmeter_rain')\
          \ }} mm\n  #   weather: \"{{ states('sensor.buienradar_condition') }}\"\n\
          \  entities: \n    {%- set scene_entities = [] -%}\n    {%- for l in entities\
          \ %}\n    {{ l }}:\n      state: \"{{ states(l) }}\"\n      {%- if not is_state(l,'off')\
          \ -%}\n        {%- for attr in states[l].attributes -%}\n          {%- if\
          \ not attr in ['friendly_name', 'effect_list', 'update', 'update_available',\
          \ 'linkquality', 'supported_features', 'icon', 'min_mireds', 'max_mireds',\
          \ 'supported_color_modes'] %}\n      {{ attr }}: {{ \" \" }} \n        \
          \    {%- if states[l].attributes[attr] is string or states[l].attributes[attr]\
          \ is number -%}\n              {{ states[l].attributes[attr] }}  \n    \
          \        {%- elif states[l].attributes[attr] is mapping -%}\n          \
          \    {%- for value in states[l].attributes[attr] %}\n        {{ value }}:\
          \ {{ states[l].attributes[attr][value] }}\n              {%- endfor -%}\
          \  \n            {%- elif states[l].attributes[attr] is iterable -%}\n \
          \             {%- for value in states[l].attributes[attr] %}\n        -\
          \ {{ value }}\n              {%- endfor -%}  \n            {% endif %} \
          \                   \n          {%- endif %}\n        {%- endfor %}\n  \
          \    {%- endif %}\n    {%- endfor %}\n"
    - service: scene.reload
    - service: script.debug
      data_template:
        source: script.area_scene_snapshot
        title: Group or area saved
        message: "{% if group is defined and group is not none %}\n  Group {{ group\
          \ }} saved to {{ snap }}\n{% else %}\n  Area {{ area }} saved to {{ snap\
          \ }}\n{% endif %}\n"
area_snapshot_for_area:
  alias: area_snapshot_for_area
  sequence:
  - service: script.area_scene_snapshot
    data_template:
      area: '{{ states(''input_select.area'') }}'
      description: '{{ states(''input_text.scene_snapshot_desc'') }}'
area_snapshot_for_group:
  alias: area_snapshot_for_group
  sequence:
  - service: script.area_scene_snapshot
    data_template:
      group: '{{ states(''input_select.light_group'') }}'
      description: '{{ states(''input_text.scene_snapshot_desc'') }}'
debug:
  alias: debug
  fields:
    source:
      description: Source of the debug
    title:
      description: Title
    message:
      description: Messsage to be seen
  sequence:
  - service: system_log.write
    data_template:
      message: '{{source}} | {{title}}: {{message}}'
      level: info
living_room_switch_to_fire_tv:
  alias: Living Room - Switch To Fire Tv
  sequence:
  - service: remote.send_command
    data:
      device: hdmi_switch
      command: fire tv
    target:
      device_id: 6a6df0dd46d17cc7b38f1c7dce5a5dc0
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: remote.send_command
    data:
      device: soundbar
      command: hdmi in
    target:
      entity_id: remote.living_room_remote_remote
  mode: single
living_room_switch_to_switch:
  alias: Living Room - Switch To Switch
  sequence:
  - service: remote.send_command
    data:
      device: hdmi_switch
      command: switch
    target:
      device_id: 6a6df0dd46d17cc7b38f1c7dce5a5dc0
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: remote.send_command
    data:
      device: soundbar
      command: hdmi in
    target:
      entity_id: remote.living_room_remote_remote
  mode: single
living_room_switch_to_playstation:
  alias: Living Room - Switch To Playstation
  sequence:
  - service: remote.send_command
    data:
      device: hdmi_switch
      command: playstation
    target:
      device_id: 6a6df0dd46d17cc7b38f1c7dce5a5dc0
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: remote.send_command
    data:
      device: soundbar
      command: hdmi in
    target:
      entity_id: remote.living_room_remote_remote
  mode: single
living_room_switch_to_pc:
  alias: Living Room - Switch To PC
  sequence:
  - service: remote.send_command
    data:
      device: hdmi_switch
      command: pc
    target:
      device_id: 6a6df0dd46d17cc7b38f1c7dce5a5dc0
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: remote.send_command
    data:
      device: soundbar
      command: hdmi in
    target:
      entity_id: remote.living_room_remote_remote
  mode: single
living_room_switch_to_hdmi_in:
  alias: Living Room - Switch To HDMI In
  sequence:
  - service: remote.send_command
    data:
      device: soundbar
      command: hdmi in
    target:
      entity_id: remote.living_room_remote_remote
  mode: single
living_room_toggle_hdmi_switch:
  alias: Living Room - Toggle HDMI Switch
  sequence:
  - service: remote.send_command
    data:
      device: hdmi_switch
      command: power
    target:
      entity_id: remote.living_room_remote_remote
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: remote.send_command
    data:
      device: soundbar
      command: hdmi in
    target:
      entity_id: remote.living_room_remote_remote
  mode: single
